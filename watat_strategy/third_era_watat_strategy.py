from mm_calendar.constants import LUNAR_MONTH, SOLAR_YEAR, ZERO_YEAR_JDN
from .watat_strategy_base import WatatStrategyBase

# တတိယခေတ် (လွတ်လပ်ရေးရပြီးခေတ် ၁၃၁၂ (ခရစ်နှစ် ၁၉၅၀) နှင့်နှောင်းပိုင်း)
# လက်ရှိ တတိယခေတ် က လွတ်လပ်ရေးရပြီး နောက်ပိုင်း ခေတ်ဖြစ်ပြီး 
# မြန်မာ ပြက္ခဒိန် အကြံပေးအဖွဲ့ရဲ့နည်းကို အခုအချိန်ထိ အသုံးပြုခဲ့ပါတယ်။ 
# ပထမရှစ်လထဲမှာ ရက်ပို တစ်လစာ ပြည့်ရင် အဲဒီနှစ်မှာပဲ ဝါထပ်ဖို့ဖြစ်ပြီး
# နောက်ဆုံးလေးလ ထဲမှသာ ရက်ပြည့်ပါက နောက်နှစ်မှဝါထပ်ရန်ဖြစ်ပါတယ်။ 
# သူရိယနှစ် တစ်နှစ်မှာ ရက်ပို ၁၀.၈၉၁၇၀၁၁ ရက်ရှိတာမို့ သူရိယလ တစ်လစာအတွက် ရက်ပို လိုချင်ရင် 
# အဲဒီကိန်းကို ဆယ့်နှစ် နဲ့ စားပြီး ၀.၉၀၇၆၄၁၇ ရက် ဆိုတာ ကို သိနိုင် ပါတယ်။ 
# အရင်နှစ်တုန်းက ရက်ပြည့်ခဲ့ မပြည့်ခဲ့ကို တစ်လစာ ရက်ပို နဲ့ ၄ နဲ့မြှောက်ပြီး၊ လက်ရှိနှစ် အစရဲ့ ရက်ပိုနဲ့ နှိုင်းယှဉ်ကြည့်နိုင်ပါတယ်။ 
# လက်ရှိရက်ပိုက ငယ်နေမယ်ဆို ရက်ပြည့်ပြီးသား ဖြစ်ခဲ့တာမို့ ရက်ပိုကို တစ်လစာ ရက်အရေအတွက် ပြန်ပေါင်းထည့်ပြီး ချိန်ညှိဖို့လိုပါတယ်။
# ဝါထပ်/မထပ် သိရဖို့ စန္ဒြမာသလတစ်လစာရက်တွေနဲ့ ညှိပြီးသားရက်ပိုရယ် ၈လစာရက်ပိုရယ်ပေါင်းခြင်းနဲ့နှိုင်းယှဉ်ရပါမယ်။
# တကယ်လို့ ညှိပြီးသားရက်ပိုနဲ့ ၈လစာရက်ပိုပေါင်းခြင်းက စန္ဒြမာသတစ်လနဲ့ညီရင် ကြီးရင် ဝါထပ်ပါတယ်။
class ThirdEraWatatStrategy(WatatStrategyBase):
    def __init__(self, year) -> None:
        super().__init__(year)
        self.to_check_months = 8 # check based on 8 months
        self.excess_days_per_month = (SOLAR_YEAR / 12) - LUNAR_MONTH
        self.watat_offset = -0.5
        self.watat_exceptions = {1345: False, 1344: True} # key is year and value is whether watat or not
        self.offset_exceptions = {1377: 0.5} # key is year and value is offset

    def is_watat(self) -> bool:
        # ဒီနည်းနဲ့ တွက်ကြည့်ပြီး ရှိပြီးသား မြန်မာပြက္ခဒိန် မှတ်တမ်းတွေနဲ့ တိုက်ကြည့်လိုက်တော့ နှစ်အားလုံးကိုက်ညီပေမယ့်
        # တစ်နှစ်ပဲ ၁၃၄၅ ခုနှစ်မှာ ဝါထပ်ရမယ့် အစား ၁၃၄၄ ခုနှစ်မှာ ဝါထပ်ထားတာကို ခြွင်းချက်အနေနဲ့ တွေ့ရပါတယ်။
        if self.year in self.watat_exceptions:
            return self.watat_exceptions.get(self.year)

        excess_days = self._calculate_excess_days()
        return excess_days + (self.to_check_months * self.excess_days_per_month) >= LUNAR_MONTH
    
    # မြန်မာ ပြက္ခဒိန်မှာ လထပ်၊ ရက်ထပ်ပြီး ချိန်ညှိပြီးကာစ ဖြစ်တဲ့ ဝါထပ်နှစ်ရဲ့ ဒုတိယ ဝါဆိုလပြည့်နေ့ က အမှန်ဆုံး၊ ပုံသေအရှိဆုံး နဲ့ အခန့်မှန်းနိုင်ဆုံး ဖြစ်ပါတယ်။ 
    # ဝါထပ်နှစ် ဝါဆိုလ မတိုင်ခင်မှာ ပဲ ရက်ထပ်ဖြည့်လို့ရတဲ့ စည်းမျဉ်းကြောင့် တခြားနှစ် နဲ့ လတွေမှာ လွဲမှားမှု ရှိလည်း ဘာမှလုပ်လို့ မရလို့ပါ။ 
    # ပညာရှင်တော်တော်များများက မြန်မာ ပြက္ခဒိန်မှာ ဝါထပ် ရက်ငင်စည်းကမ်း ပုံသေမရှိတာကြောင့် အနာဂတ်ကို ကြိုပြီး တွက်လို့မရနိုင် ဘူးလို့ဆိုကြပါတယ်။ 
    # ဘာကြောင့် စည်းကမ်း ပုံသေမရှိတာလဲလို့ စဉ်းစား ကြည့်တဲ့အခါ ဒုတိယ ဝါဆိုလပြည့်နေ့ ရဲ့ တိထီ၊ စန်းယှဉ် နက္ခတ် များကိုက်ညီမှု ကို ဦးစားပေးတာကြောင့်လို့ ဆိုရပါမယ်။ 
    # တနည်းပြောရရင် ဒုတိယ ဝါဆိုလပြည့်နေ့ ရဲ့တိကျမှု က ပိုအရေးကြီး တာကြောင့် ဖြစ်ပါတယ်။
    # မြန်မာ ပြက္ခဒိန် အကြံပေး အဖွဲ့ရဲ့ မူဝါဒမှာ "ဒုတိယ ဝါဆိုလပြည့်၍ တိထီ အားကောင်း၍၊ အဿဠီ နက္ခတ်များနှင့် စန်းယှဉ်စေရမည်" လို့ ပါရှိကြောင်း သိရပါတယ်။ 
    # ဒုတိယ ဝါဆိုလပြည့်နေ့ ကိုက်ညီတိကျရင် အနာဂတ်ကို ကြိုတွက်နိုင်ပါတယ်။ ရက်ငင်စည်းကမ်း ရှိဖို့ မလိုပါ။ 
    # အဲဒီလိုတွက်ဖို့ ဒုတိယ ဝါဆိုလပြည့်နေ့ ကိုသိဖို့ လိုအပ်ပါတယ်။ 
    # ဝါထပ်နှစ် တစ်နှစ်ရဲ့ နှစ်ဆန်းချိန် ကနေ ရက်ပိုကို နုတ်ရင် တန်ခူးလ အစ (တပေါင်းလကွယ် ပြီးချိန်) ရဲ့ အချိန်ကို ရပါတယ်။ 
    # တန်ခူးလ အစ အချိန်ကို ၄ လခွဲ ပေါင်းပေးရင် ဒုတိယ ဝါဆိုလပြည့် နေ့ကိုရပါတယ်။ 
    # လပြည့်ချိန်ကို ညသန်းခေါင်နဲ့ ကိုက်အောင် ချိန်မှာဖြစ်တဲ့အတွက် သန်းခေါင်နှင့် မွန်းတည့် ကွာချိန် ၀.၅ ရက် ကို ပြန်နုတ် ပေးဖို့လိုပါတယ်။
    # အောက်က ပုံသေနည်းနဲ့ ရှာနိုင်ပါတယ်။
    # ဒုတိယဝါဆိုလပြည့်နေ့ = (သူရိယမာသနှစ် x ရှာလိုသောနှစ်) + မြန်မာနှစ် သုညနှစ်(ဂျူလီယန်ရက်) - ရက်ပို + (၄.၈ x စန္ဒြမာသလ) - ၀.၅
    def get_second_waso_full_moon_day(self) -> int:
        excess_days = self._calculate_excess_days()
        watat_offset = self.offset_exceptions.get(self.year) if self.year in self.offset_exceptions else self.watat_offset

        return round(SOLAR_YEAR * self.year + ZERO_YEAR_JDN - excess_days + 4.5 * LUNAR_MONTH + watat_offset)
    
    def _calculate_excess_days(self) -> float:
        excess_days = (SOLAR_YEAR * (self.year + 3739)) % LUNAR_MONTH
        to_check_excess_days = (12 - self.to_check_months) * self.excess_days_per_month
        
        # if excess days is less than 4 months excess days
        # then this must be watat and need to adjust
        excess_days += LUNAR_MONTH if excess_days < to_check_excess_days else 0

        return excess_days